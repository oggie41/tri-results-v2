@using TriResultsV2.Models
@using TriResultsV2.Helpers
@model EventResultsTableVM

@{
    string resultTableId = $"tbl-{Model.ContentId}";
    var distinctCourses = Model.EventResults.Where(e => e.Course != null).OrderBy(e => e.Course).Select(e => e.Course).Distinct().ToList();
    var eventResultsSorted = Model.EventResults.OrderByDescending(e => e.EventDate).ToList();

    if (Model.PersonalRecordsTable)
    {
        eventResultsSorted = Model.EventResults.OrderBy(e => e.Distance).ToList();
    }

    string resultsContainerCssClass = string.Empty;

    if (!Model.PersonalRecordsTable)
    {
        // This class ensures a minimum height is set, which avoids scrolling issues with the link dropdown menu. Not required for personal record tables.
        resultsContainerCssClass = "tri-result-table";
    }
}
@if (!Model.PersonalRecordsTable && distinctCourses.Any())
{
    if (distinctCourses.Count > 1)
    {
        <div class="mt-3">
            <div class="d-inline-block me-1">
                Course:
            </div>
            <div class="d-inline-block">
                <select class="form-select" onchange="Tri.CourseChanged(this, '@resultTableId')">
                    <option value="all" selected>Show All</option>
                    @foreach (var course in distinctCourses)
                    {
                        <option value="@course.ToString()">@course.ToEnumDisplayName()</option>
                    }
                </select>
            </div>
        </div>
    }
}
<div class="table-responsive mt-3 mb-1 @resultsContainerCssClass">
    <table id="@resultTableId" class="table table-hover table-bordered align-top">
        <thead class="table-primary align-top">
            <tr>
                @if (!Model.SwimCssTestsTable)
                {
                    @if (Model.PersonalRecordsTable)
                    {
                        <th scope="col" class="col-1">
                            <div class="d-block d-sm-none">Dist.</div>
                            <div class="d-none d-sm-block">Distance</div>
                        </th>
                    }
                    <th scope="col" class="col-2">Date</th>
                    <th scope="col" class="col-5">Event</th>
                    <th scope="col" class="col-2">Time</th>
                    <th scope="col" class="col-2">
                        @{
                            string colHeader = "Pace";

                            if (eventResultsSorted.Any())
                            {
                                var firstResult = eventResultsSorted.FirstOrDefault();

                                if (firstResult != null)
                                {
                                    if (firstResult.Sport == SportType.Bike)
                                    {
                                        colHeader = "Speed";
                                    }

                                    if (firstResult.EventType == EventType.MultiStage)
                                    {
                                        colHeader = "Position";
                                    }
                                }
                            }
                        }
                        @colHeader
                    </th>
                    @if (!Model.PersonalRecordsTable)
                    {
                        <th scope="col" class="col-1"></th>
                    }
                }
                else
                {
                    @* Swim CSS Test headings *@
                    <th scope="col" class="col-4">Pool/Date</th>
                    <th scope="col" class="col-2">200m Time</th>
                    <th scope="col" class="col-2">200m Pace</th>
                    <th scope="col" class="col-2">400m Time</th>
                    <th scope="col" class="col-2">400m Pace</th>
                }
            </tr>
        </thead>
        <tbody>
            @if (eventResultsSorted.Any())
            {
                int rowNumber = 1;

                foreach (var result in eventResultsSorted)
                {
                    string avgPaceSpeed = "-";

                    if (result.Sport == SportType.Run)
                    {
                        avgPaceSpeed = RunHelper.GetFormattedAvgPace(result.AvgRunPaceMinMi);
                    }
                    else if (result.Sport == SportType.Bike)
                    {
                        avgPaceSpeed = BikeHelper.GetFormattedAvgSpeed(result.AvgBikeSpeedMph);
                    }
                    else if (result.Sport == SportType.Swim)
                    {
                        avgPaceSpeed = SwimHelper.Get25MetreSwimPace(result.Distance, result.TotalTime);
                    }

                    string eventName = result.EventName;

                    if (string.IsNullOrEmpty(eventName))
                    {
                        // No event name specified so generate the name.
                        eventName = EventHelper.GetEventName(result);
                    }

                    string rowCssClass = string.Empty;
                    string rowPbCssClass = string.Empty;

                    // If this is a PB event display the row text in bold (not for PB or CSS Test table).
                    if (!Model.PersonalRecordsTable && !Model.SwimCssTestsTable && result.PersonalBest)
                    {
                        eventName = $"{eventName} (PB)";
                        rowPbCssClass = "fw-bold";
                    }

                    bool displayRow = true;

                    if (Model.SwimCssTestsTable && result.Distance == 200 && result.DistanceUnit == DistanceUnit.Metres)
                    {
                        displayRow = false;
                    }

                    if (displayRow)
                    {
                        // Alternate row striping is done manually (not using table-striped) as need to re-apply after filtering.
                        if (rowNumber % 2 != 0)
                        {
                            rowCssClass += "tri-striped-row";
                        }

                        rowNumber++;
                        <tr class="@rowCssClass @rowPbCssClass" data-course="@result.Course">
                            @if (!Model.SwimCssTestsTable)
                            {
                                @if (Model.PersonalRecordsTable)
                                {
                                    <td>@EventHelper.GetFormattedDistance(result.Distance, result.DistanceUnit, result.Sport)</td>
                                }
                                <td>@result.EventDate.ToString("dd/MM/yy")</td>
                                <td>
                                    @if (result.GarminId.HasValue)
                                    {
                                        <a href="https://connect.garmin.com/modern/activity/@result.GarminId" target="_blank">@Html.Raw(eventName)</a>
                                    }
                                    else
                                    {
                                        @Html.Raw(eventName)
                                    }
                                </td>
                                <td>@EventHelper.GetFormattedTime(result.TotalTime)</td>
                                <td>
                                    @if (result.EventType == EventType.MultiStage)
                                    {
                                        @if (result.OverallPosition.HasValue)
                                        {
                                            <text>@EventHelper.GetFormattedPosition(result.OverallPosition) (@result.TotalParticipants)</text>
                                        }
                                    }
                                    else
                                    {
                                        @avgPaceSpeed
                                    }
                                    @if (result.Sport == SportType.Bike)
                                    {
                                        if (result.AvgBikePower.HasValue)
                                        {
                                            <div>
                                                @Html.Raw(BikeHelper.GetFormattedAvgPowerHtml(result.AvgBikePower.Value))
                                            </div>
                                        }
                                    }
                                </td>
                                @if (!Model.PersonalRecordsTable)
                                {
                                    var linksDropdownMenu = new LinksDropdownMenuVM
                                    {
                                        EventResult = result,
                                        PaddingX = 1,
                                        ShowExtendedText = false,
                                        HideTextForMobile = true
                                    };

                                    <td>
                                        <partial name="_LinksDropdownMenu" model="linksDropdownMenu"/>
                                    </td>
                                }
                            }
                            else
                            {
                                // Swim CSS Test results.
                                eventName = $"{result.Course.ToEnumDisplayName()}, {result.EventDate.ToString("dd/MM/yy")}";

                                // Only showing the 400m row, so retrieve the 200m time.
                                var result200m = new EventResult();

                                if (result.GarminId.HasValue)
                                {
                                    result200m = eventResultsSorted.FirstOrDefault(r => r.GarminId == result.GarminId && r.Distance == 200 && r.DistanceUnit == DistanceUnit.Metres);
                                }

                                string cell200mPbCssClass = string.Empty;
                                string cell400mPbCssClass = string.Empty;

                                if (result.PersonalBest)
                                {
                                    cell400mPbCssClass = "fw-bold";
                                }

                                if (result200m != null)
                                {
                                    if (result200m.PersonalBest)
                                    {
                                        cell200mPbCssClass = "fw-bold";
                                    }
                                }
                                <td>
                                    @if (result.GarminId.HasValue)
                                    {
                                        <a href="@EventHelper.GetGarminActivityUrl(result.GarminId.Value)" target="_blank">@Html.Raw(eventName)</a>
                                    }
                                    else
                                    {
                                        @Html.Raw(eventName)
                                    }
                                </td>
                                <td class="@cell200mPbCssClass">
                                    @if (result200m != null)
                                    {
                                        @EventHelper.GetFormattedTime(result200m.TotalTime)
                                    }
                                </td>
                                <td class="@cell200mPbCssClass">
                                    @if (result200m != null)
                                    {
                                        @SwimHelper.Get25MetreSwimPace(result200m.Distance, result200m.TotalTime)
                                    }
                                </td>
                                <td class="@cell400mPbCssClass">@EventHelper.GetFormattedTime(result.TotalTime)</td>
                                <td class="@cell400mPbCssClass">@avgPaceSpeed</td>
                            }
                        </tr>
                    }
                    @if (!Model.PersonalRecordsTable && result.EventFigures.Any())
                    {
                        <tr class="@rowCssClass" data-course="@result.Course">
                            <td colspan="5">
                                <div class="figure-caption">
                                    @foreach (var figure in result.EventFigures)
                                    {
                                        <div>
                                            <i class="@IconHelper.GetIconClass(figure.Icon)"></i> @figure.Text
                                        </div>
                                    }
                                </div>
                            </td>
                        </tr>
                    }
                }
            }
        </tbody>
    </table>
</div>